import cv2
import numpy as np

from img_process.contour import get_contours, sort_contours
from img_process.utility import check_img, get_size, rgb_img
from include.img_process_gray import img_process_gray
from include.img_process_rgb import img_process_rgb
from box.img_view import img_view
from box.box_manage import box_manage

'''
Purpose
-   Transform image as dilated image to get the text format data without using ML model.

Attribute

NAME        TYPE                UPDATE_METHOD		DESCRIPTION
img			img_process_rgb     __init__()			original img image
dilate_img	img_process_gray    update_dilate_img()	dilate image for getting the format of the text
all_box   	list[list[int]]     update_dilate_img()	array of all box generated by get_contours(img=self.dilate_img.img)
box       	list[list[int]]     select_box()		selected box from all_box, filtered by select_box
'''

class img_dilate:
    def __init__(self, 
                img: np.ndarray | str,
                thresh_px: int = 0,
                kernel: np.ndarray = np.ones(shape=(2, 30)),
                ksize: int = 9):
        if type(img) == str:
            img:np.ndarray = cv2.imread(filename=img)
            if img is None:
                raise ValueError(f"Error: The file at path '{img}' could not be loaded.")
        elif type(img) == np.ndarray:
            img:np.ndarray = check_img(img)
        else:
            raise TypeError("Error: Input img must be np.ndarray or str")
        self.img:img_process_rgb = img_process_rgb(img = rgb_img(img))
        img:img_process_gray = img_process_gray(img=img)
        img.contour_img(
            thresh_px=thresh_px,
            kernel=kernel,
            ksize=ksize)
        self.dilate_img:img_process_gray = img
        self.all_box:list = get_contours(img=self.dilate_img.img)
        self.box = []

#-----------------------------------------------------------------------------------------
    # PURPOSE : CREATE AND SELECT BOX
    # (x, y, width, height) = (arr[i-1].x, arr[i-1].y, arr[i].x - arr[i-1].x, arr[i].y- arr[i-1].y)

    # Update dilate_img using img_process_gray.contour_img method
    def update_dilate_img(self,                
                thresh_px: int = 0,
                kernel: np.ndarray = np.ones(shape=(2, 30)),
                ksize: int = 9) -> None:
        img:img_process_gray = img_process_gray(img=self.img.img)
        img.contour_img(
            thresh_px=thresh_px,
            kernel=kernel,
            ksize=ksize)
        self.dilate_img = img
        self.all_box = get_contours(img=self.dilate_img.img)

    # Get selected box as self.box from self.all_box filtered by this function.
    def select_box(
            self, 
            min_x:int = 0,
            max_x:int|None = None,
            min_y:int = 0,
            max_y:int|None = None,
            min_w:int = 0,
            max_w:int|None = None,
            min_h:int = 0,
            max_h:int|None = None,
            ) -> None:
        w = self.img.img.shape[1]
        h = self.img.img.shape[0]

        min_x = get_size(size=min_x, maxval=w)
        min_y = get_size(size=min_y, maxval=h)
        max_x = get_size(size=max_x, maxval=w,default_size=w)
        max_y = get_size(size=max_y, maxval=h,default_size=h)

        min_w = get_size(size=min_w, maxval=w)
        min_h = get_size(size=min_h, maxval=h)
        max_w = get_size(size=max_w, maxval=w,default_size=w)
        max_h = get_size(size=max_h, maxval=h,default_size=h)

        self.all_box = get_contours(img=self.dilate_img.img)
        self.box = []
        for i in self.all_box:
            if (
                (i[0] > min_x and i[0] < max_x) and 
                (i[1] > min_y and i[1] < max_y) and 
                (i[2] > min_w and i[2] < max_w) and 
                (i[3] > min_h and i[3] < max_h)
                ):
                self.box.append(i)

#-----------------------------------------------------------------------------------------
    # PURPOSE : GET IMAGE DATA

    def get_img_view(self):
        return img_view(
            img=self.img.img,
            box = self.box
        )
    
    def get_dilate_img_view(self):
        return img_view(
            img=self.dilate_img.img,
            box = self.box
        )

    def get_img(self) -> np.ndarray:
        return self.img.img

    def get_box(self):
        return self.box

#-----------------------------------------------------------------------------------------
    # PURPOSE : GET BOXES DATA

    def get_box_manage(self):
        return box_manage(box = self.box)

    def sort_box(self, reverse: bool = False, method: int = 4)->None:
        self.box = sort_contours(contour=self.box, reverse=reverse, method=method)

#-----------------------------------------------------------------------------------------
